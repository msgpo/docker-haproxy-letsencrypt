global
    chroot /var/lib/haproxy
    log /dev/log local0
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    maxconn 500
    nbproc 1

    # load luas
    lua-load /data/etc/haproxy/lua/acme-http01-webroot.lua
    lua-load /data/etc/haproxy/lua/robots_disallow.lua
    lua-load /data/etc/haproxy/lua/healthcheck.lua

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Default ciphers to use on SSL-enabled listening sockets.
    # For more information, see ciphers(1SSL). This list is from:
    #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS
    ssl-default-bind-options no-sslv3

defaults
	log	global
    mode http

	# log settings
	option httplog
	option dontlognull

	# loadbalancing settings
	balance leastconn

	# timeout settings
	timeout connect 5000
	timeout client  50000
	timeout server  50000

	# error settings
	errorfile 400 /data/etc/haproxy/errors/400.http
	errorfile 403 /data/etc/haproxy/errors/403.http
	errorfile 408 /data/etc/haproxy/errors/408.http
	errorfile 500 /data/etc/haproxy/errors/500.http
	errorfile 502 /data/etc/haproxy/errors/502.http
	errorfile 503 /data/etc/haproxy/errors/503.http
	errorfile 504 /data/etc/haproxy/errors/504.http

frontend default_frontend
    # do not edit bind values, they are dynamicaly changed
    bind *:80
    # uncomment this after letsencrypt is success
    # bind *:443 ssl crt /data/etc/haproxy/ssl/haproxy.pem alpn h2,http/1.1 no-tls-tickets no-sslv3 ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES128-SHA:AES256-SHA256:AES256-SHA:DES-CBC3-SHA

    # capture headers so we have these in logs
    capture request header Host len 100
    capture request header User-Agent len 64
    capture response header Location len 32

    # test uri to see if its a letsencrypt request
    acl letsencrypt-acl path_beg /.well-known/acme-challenge/
    use_backend backend_letsencrypt if letsencrypt-acl

    # test uri to see if its a haproxy_status request
    acl status_page path_beg /haproxy_status
    use_backend backend_haproxy_status if status_page

    # test uri to see if its a healtcheck request
    acl healthcheck_allowed_nets src 127.0.0.1
    acl healthcheck path_beg /healthcheck
    http-request use-service lua.healthcheck if healthcheck healthcheck_allowed_nets

    # Remove incoming headers
    reqidel ^X-Forwarded-For:.*
    reqidel ^X_Forwarded_For:.*

    # Remove outgoing headers
    rspidel ^Server:.*$
    rspidel ^X-Powered-By:.*$
    rspidel ^X-AspNet-Version:.*$

    # Add unique id to requests
    unique-id-format %{+X}o\ %ci:%cp_%fi:%fp_%Ts_%rt:%pid
    unique-id-header X-Request-ID

    # Distinguish between secure and insecure requests
    acl secure dst_port eq 443

    # Mark all cookies as secure if sent over SSL
    rsprep ^Set-Cookie:\ (.*) Set-Cookie:\ \1;\ Secure if secure

    # Add the HSTS header with a 1 year max-age
    rspadd Strict-Transport-Security:\ max-age=31536000 if secure

    default_backend backend_default

# haproxy stats backend
backend backend_haproxy_status
    stats enable
    stats uri /

# letsencrypt backend
backend backend_letsencrypt
    server letsencrypt 127.0.0.1:8888

# default backend
backend backend_default
    # Config omitted here
